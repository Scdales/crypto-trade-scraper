# Rust Quote Scraper Dockerfile Template
# This template is designed to be used with build context at the scrapers level
# and should be referenced with dockerfile: path/to/specific/scraper/Dockerfile

# Build arguments
ARG ENV=dev
ARG SCRAPER_NAME

# Base stage with Rust toolchain and common dependencies
FROM rust:1.89-bookworm AS base
WORKDIR /app

# Install system dependencies that might be needed across scrapers
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set common environment variables
ENV RUST_BACKTRACE=1
ENV CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

# Copy all scraper sources for dependency resolution
# This allows cargo to resolve dependencies across all projects
COPY . .

# Change to the specific scraper directory
WORKDIR /app/${SCRAPER_NAME}

# Development stage - runs cargo run directly
FROM base AS dev
CMD ["cargo", "run"]

# Dependency caching stage - builds only dependencies
FROM base AS deps
RUN cargo build --release --locked
RUN rm src/*.rs target/release/deps/${SCRAPER_NAME//-/_}*

# Build stage for production - builds the actual binary
FROM deps AS builder
COPY ${SCRAPER_NAME}/src ./src
RUN cargo build --release --locked

# Production runtime stage - minimal image with just the binary
FROM debian:bookworm-slim AS prod

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && update-ca-certificates

# Create non-root user for security
RUN useradd -r -s /bin/false scraper

ARG SCRAPER_NAME
# Copy the binary from builder stage
COPY --from=builder /app/${SCRAPER_NAME}/target/release/${SCRAPER_NAME} /usr/local/bin/scraper

# Make binary executable and owned by scraper user
RUN chmod +x /usr/local/bin/scraper \
    && chown scraper:scraper /usr/local/bin/scraper

USER scraper
CMD ["/usr/local/bin/scraper"]

# Multi-stage selection based on ENV argument
FROM ${ENV} AS final